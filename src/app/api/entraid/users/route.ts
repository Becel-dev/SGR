import { NextRequest, NextResponse } from 'next/server';
import { getToken } from 'next-auth/jwt';
import { Client } from '@microsoft/microsoft-graph-client';
import { ClientSecretCredential } from '@azure/identity';
import 'isomorphic-fetch';

// Configura√ß√£o do cliente Microsoft Graph usando credenciais da aplica√ß√£o
function getGraphClient() {
  const credential = new ClientSecretCredential(
    process.env.AZURE_AD_TENANT_ID!,
    process.env.AZURE_AD_CLIENT_ID!,
    process.env.AZURE_AD_CLIENT_SECRET!
  );

  return Client.initWithMiddleware({
    authProvider: {
      getAccessToken: async () => {
        const token = await credential.getToken('https://graph.microsoft.com/.default');
        return token.token;
      },
    },
  });
}

export async function GET(request: NextRequest) {
  try {
    // Verificar autentica√ß√£o do usu√°rio
    const token = await getToken({ 
      req: request,
      secret: process.env.NEXTAUTH_SECRET 
    });

    if (!token) {
      return NextResponse.json(
        { error: 'N√£o autenticado' },
        { status: 401 }
      );
    }

    // Buscar par√¢metros da query
    const { searchParams } = new URL(request.url);
    const search = searchParams.get('search') || '';
    const top = parseInt(searchParams.get('top') || '50');

    console.log('üîç Buscando usu√°rios do EntraID:', { search, top });

    // Se n√£o houver query, retorna lista vazia
    if (!search || search.length < 2) {
      console.log('‚ö†Ô∏è Termo de busca muito curto, retornando lista vazia');
      return NextResponse.json({
        users: [],
        count: 0,
      });
    }

    // Verifica se as vari√°veis de ambiente est√£o configuradas
    if (!process.env.AZURE_AD_TENANT_ID || !process.env.AZURE_AD_CLIENT_ID || !process.env.AZURE_AD_CLIENT_SECRET) {
      console.error('‚ùå Credenciais do Azure AD n√£o configuradas');
      return NextResponse.json({ 
        error: 'Azure AD n√£o configurado. Verifique as vari√°veis de ambiente.',
        configured: {
          tenantId: !!process.env.AZURE_AD_TENANT_ID,
          clientId: !!process.env.AZURE_AD_CLIENT_ID,
          clientSecret: !!process.env.AZURE_AD_CLIENT_SECRET,
        }
      }, { status: 500 });
    }

    console.log('‚úÖ Credenciais do Azure AD encontradas, obtendo cliente Graph...');
    const client = getGraphClient();

    console.log('üì° Fazendo requisi√ß√£o ao Microsoft Graph API...');
    
    // Busca usu√°rios que correspondem √† query
    const filterQuery = `startswith(displayName,'${search}') or startswith(givenName,'${search}') or startswith(surname,'${search}') or startswith(userPrincipalName,'${search}')`;
    console.log('ÔøΩ Filtro:', filterQuery);

    const response = await client
      .api('/users')
      .filter(filterQuery)
      .select('id,displayName,userPrincipalName,mail,jobTitle,department')
      .top(top)
      .get();

    console.log('‚úÖ Resposta do Graph API:', {
      totalResults: response.value?.length || 0,
      hasResults: !!response.value && response.value.length > 0
    });

    // Formata resposta
    const users = response.value || [];
    
    return NextResponse.json({
      users: users,
      count: users.length,
    });

  } catch (error: any) {
    console.error('‚ùå Erro ao buscar usu√°rios:', {
      message: error.message,
      statusCode: error.statusCode,
      code: error.code,
    });
    
    // Se houver erro de autentica√ß√£o/autoriza√ß√£o
    if (error.statusCode === 401 || error.statusCode === 403) {
      console.warn('‚ö†Ô∏è Erro de autentica√ß√£o/autoriza√ß√£o - verificar permiss√µes do Azure AD');
      return NextResponse.json({ 
        error: 'Falha na autentica√ß√£o',
        details: 'As permiss√µes do Azure AD n√£o est√£o configuradas. Adicione User.Read.All e Directory.Read.All.',
        statusCode: error.statusCode
      }, { status: 403 });
    }

    return NextResponse.json(
      { 
        error: 'Falha ao buscar usu√°rios', 
        details: error.message,
        statusCode: error.statusCode,
        code: error.code 
      },
      { status: 500 }
    );
  }
}
